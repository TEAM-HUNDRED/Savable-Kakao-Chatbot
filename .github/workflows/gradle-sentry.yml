# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "sentry" ]
  pull_request:
    branches: [ "sentry" ]
    paths:
      - '**/application*.yml'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest #ubuntu-20.04
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Gradle Build를 위한 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

#      - name: Set YML
#        run: |
#          mkdir -p src/main/resources
#          echo "${{ secrets.SENTRY_DSN }}" | base64 --decode > src/main/resources/application.yml
#          find src
      - name: Set Sentry
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      # Gradle Build (test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

#      # DockerHub 로그인
#      - name: DockerHub Login
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME}}
#          password: ${{ secrets.DOCKERHUB_PASSWORD}}

      # Docker 이미지 빌드
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME_SENTRY }}/${{ secrets.PROJECT_SENTRY_NAME }} .

      # DockerHub Push
      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME_SENTRY }}/${{ secrets.PROJECT_SENTRY_NAME }}

      # EC2 인스턴스 접속 및 애플리케이션 실행
      - name: Application Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_SENTRY_HOST }}
          username: ${{ secrets.EC2_SENTRY_USERNAME }}
          key: ${{ secrets.EC2_SENTRY_KEY }}

          script: |
            sudo docker kill ${{ secrets.PROJECT_SENTRY_NAME }}
            sudo docker rm -f ${{ secrets.PROJECT_SENTRY_NAME }}
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME_SENTRY }}/${{ secrets.PROJECT_SENTRY_NAME }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_SENTRY }}/${{ secrets.PROJECT_SENTRY_NAME }}

            sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name ${{ secrets.PROJECT_SENTRY_NAME }} \
            -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_DEV_PASSWORD }} \
            -d ${{ secrets.DOCKERHUB_USERNAME_SENTRY }}/${{ secrets.PROJECT_SENTRY_NAME }}
